/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.splout.db.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-8")
public class DeployAction implements org.apache.thrift.TBase<DeployAction, DeployAction._Fields>, java.io.Serializable, Cloneable, Comparable<DeployAction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeployAction");

  private static final org.apache.thrift.protocol.TField TABLESPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("tablespace", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("dataURI", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PARTITION_FIELD_DESC = new org.apache.thrift.protocol.TField("partition", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField METADATA_FIELD_DESC = new org.apache.thrift.protocol.TField("metadata", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DeployActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DeployActionTupleSchemeFactory());
  }

  public String tablespace; // required
  public long version; // required
  public String dataURI; // required
  public int partition; // required
  public PartitionMetadata metadata; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TABLESPACE((short)1, "tablespace"),
    VERSION((short)2, "version"),
    DATA_URI((short)3, "dataURI"),
    PARTITION((short)4, "partition"),
    METADATA((short)5, "metadata");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TABLESPACE
          return TABLESPACE;
        case 2: // VERSION
          return VERSION;
        case 3: // DATA_URI
          return DATA_URI;
        case 4: // PARTITION
          return PARTITION;
        case 5: // METADATA
          return METADATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __PARTITION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TABLESPACE, new org.apache.thrift.meta_data.FieldMetaData("tablespace", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA_URI, new org.apache.thrift.meta_data.FieldMetaData("dataURI", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARTITION, new org.apache.thrift.meta_data.FieldMetaData("partition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.METADATA, new org.apache.thrift.meta_data.FieldMetaData("metadata", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PartitionMetadata.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeployAction.class, metaDataMap);
  }

  public DeployAction() {
  }

  public DeployAction(
    String tablespace,
    long version,
    String dataURI,
    int partition,
    PartitionMetadata metadata)
  {
    this();
    this.tablespace = tablespace;
    this.version = version;
    setVersionIsSet(true);
    this.dataURI = dataURI;
    this.partition = partition;
    setPartitionIsSet(true);
    this.metadata = metadata;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DeployAction(DeployAction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTablespace()) {
      this.tablespace = other.tablespace;
    }
    this.version = other.version;
    if (other.isSetDataURI()) {
      this.dataURI = other.dataURI;
    }
    this.partition = other.partition;
    if (other.isSetMetadata()) {
      this.metadata = new PartitionMetadata(other.metadata);
    }
  }

  public DeployAction deepCopy() {
    return new DeployAction(this);
  }

  @Override
  public void clear() {
    this.tablespace = null;
    setVersionIsSet(false);
    this.version = 0;
    this.dataURI = null;
    setPartitionIsSet(false);
    this.partition = 0;
    this.metadata = null;
  }

  public String getTablespace() {
    return this.tablespace;
  }

  public DeployAction setTablespace(String tablespace) {
    this.tablespace = tablespace;
    return this;
  }

  public void unsetTablespace() {
    this.tablespace = null;
  }

  /** Returns true if field tablespace is set (has been assigned a value) and false otherwise */
  public boolean isSetTablespace() {
    return this.tablespace != null;
  }

  public void setTablespaceIsSet(boolean value) {
    if (!value) {
      this.tablespace = null;
    }
  }

  public long getVersion() {
    return this.version;
  }

  public DeployAction setVersion(long version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getDataURI() {
    return this.dataURI;
  }

  public DeployAction setDataURI(String dataURI) {
    this.dataURI = dataURI;
    return this;
  }

  public void unsetDataURI() {
    this.dataURI = null;
  }

  /** Returns true if field dataURI is set (has been assigned a value) and false otherwise */
  public boolean isSetDataURI() {
    return this.dataURI != null;
  }

  public void setDataURIIsSet(boolean value) {
    if (!value) {
      this.dataURI = null;
    }
  }

  public int getPartition() {
    return this.partition;
  }

  public DeployAction setPartition(int partition) {
    this.partition = partition;
    setPartitionIsSet(true);
    return this;
  }

  public void unsetPartition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ISSET_ID);
  }

  /** Returns true if field partition is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_ISSET_ID);
  }

  public void setPartitionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_ISSET_ID, value);
  }

  public PartitionMetadata getMetadata() {
    return this.metadata;
  }

  public DeployAction setMetadata(PartitionMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  public void unsetMetadata() {
    this.metadata = null;
  }

  /** Returns true if field metadata is set (has been assigned a value) and false otherwise */
  public boolean isSetMetadata() {
    return this.metadata != null;
  }

  public void setMetadataIsSet(boolean value) {
    if (!value) {
      this.metadata = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TABLESPACE:
      if (value == null) {
        unsetTablespace();
      } else {
        setTablespace((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Long)value);
      }
      break;

    case DATA_URI:
      if (value == null) {
        unsetDataURI();
      } else {
        setDataURI((String)value);
      }
      break;

    case PARTITION:
      if (value == null) {
        unsetPartition();
      } else {
        setPartition((Integer)value);
      }
      break;

    case METADATA:
      if (value == null) {
        unsetMetadata();
      } else {
        setMetadata((PartitionMetadata)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TABLESPACE:
      return getTablespace();

    case VERSION:
      return Long.valueOf(getVersion());

    case DATA_URI:
      return getDataURI();

    case PARTITION:
      return Integer.valueOf(getPartition());

    case METADATA:
      return getMetadata();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TABLESPACE:
      return isSetTablespace();
    case VERSION:
      return isSetVersion();
    case DATA_URI:
      return isSetDataURI();
    case PARTITION:
      return isSetPartition();
    case METADATA:
      return isSetMetadata();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DeployAction)
      return this.equals((DeployAction)that);
    return false;
  }

  public boolean equals(DeployAction that) {
    if (that == null)
      return false;

    boolean this_present_tablespace = true && this.isSetTablespace();
    boolean that_present_tablespace = true && that.isSetTablespace();
    if (this_present_tablespace || that_present_tablespace) {
      if (!(this_present_tablespace && that_present_tablespace))
        return false;
      if (!this.tablespace.equals(that.tablespace))
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_dataURI = true && this.isSetDataURI();
    boolean that_present_dataURI = true && that.isSetDataURI();
    if (this_present_dataURI || that_present_dataURI) {
      if (!(this_present_dataURI && that_present_dataURI))
        return false;
      if (!this.dataURI.equals(that.dataURI))
        return false;
    }

    boolean this_present_partition = true;
    boolean that_present_partition = true;
    if (this_present_partition || that_present_partition) {
      if (!(this_present_partition && that_present_partition))
        return false;
      if (this.partition != that.partition)
        return false;
    }

    boolean this_present_metadata = true && this.isSetMetadata();
    boolean that_present_metadata = true && that.isSetMetadata();
    if (this_present_metadata || that_present_metadata) {
      if (!(this_present_metadata && that_present_metadata))
        return false;
      if (!this.metadata.equals(that.metadata))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tablespace = true && (isSetTablespace());
    list.add(present_tablespace);
    if (present_tablespace)
      list.add(tablespace);

    boolean present_version = true;
    list.add(present_version);
    if (present_version)
      list.add(version);

    boolean present_dataURI = true && (isSetDataURI());
    list.add(present_dataURI);
    if (present_dataURI)
      list.add(dataURI);

    boolean present_partition = true;
    list.add(present_partition);
    if (present_partition)
      list.add(partition);

    boolean present_metadata = true && (isSetMetadata());
    list.add(present_metadata);
    if (present_metadata)
      list.add(metadata);

    return list.hashCode();
  }

  @Override
  public int compareTo(DeployAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTablespace()).compareTo(other.isSetTablespace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTablespace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tablespace, other.tablespace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataURI()).compareTo(other.isSetDataURI());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataURI()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataURI, other.dataURI);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition()).compareTo(other.isSetPartition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition, other.partition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMetadata()).compareTo(other.isSetMetadata());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetadata()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metadata, other.metadata);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DeployAction(");
    boolean first = true;

    sb.append("tablespace:");
    if (this.tablespace == null) {
      sb.append("null");
    } else {
      sb.append(this.tablespace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataURI:");
    if (this.dataURI == null) {
      sb.append("null");
    } else {
      sb.append(this.dataURI);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition:");
    sb.append(this.partition);
    first = false;
    if (!first) sb.append(", ");
    sb.append("metadata:");
    if (this.metadata == null) {
      sb.append("null");
    } else {
      sb.append(this.metadata);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (metadata != null) {
      metadata.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DeployActionStandardSchemeFactory implements SchemeFactory {
    public DeployActionStandardScheme getScheme() {
      return new DeployActionStandardScheme();
    }
  }

  private static class DeployActionStandardScheme extends StandardScheme<DeployAction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DeployAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TABLESPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tablespace = iprot.readString();
              struct.setTablespaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.version = iprot.readI64();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataURI = iprot.readString();
              struct.setDataURIIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PARTITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.partition = iprot.readI32();
              struct.setPartitionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // METADATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.metadata = new PartitionMetadata();
              struct.metadata.read(iprot);
              struct.setMetadataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DeployAction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tablespace != null) {
        oprot.writeFieldBegin(TABLESPACE_FIELD_DESC);
        oprot.writeString(struct.tablespace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI64(struct.version);
      oprot.writeFieldEnd();
      if (struct.dataURI != null) {
        oprot.writeFieldBegin(DATA_URI_FIELD_DESC);
        oprot.writeString(struct.dataURI);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARTITION_FIELD_DESC);
      oprot.writeI32(struct.partition);
      oprot.writeFieldEnd();
      if (struct.metadata != null) {
        oprot.writeFieldBegin(METADATA_FIELD_DESC);
        struct.metadata.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DeployActionTupleSchemeFactory implements SchemeFactory {
    public DeployActionTupleScheme getScheme() {
      return new DeployActionTupleScheme();
    }
  }

  private static class DeployActionTupleScheme extends TupleScheme<DeployAction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DeployAction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTablespace()) {
        optionals.set(0);
      }
      if (struct.isSetVersion()) {
        optionals.set(1);
      }
      if (struct.isSetDataURI()) {
        optionals.set(2);
      }
      if (struct.isSetPartition()) {
        optionals.set(3);
      }
      if (struct.isSetMetadata()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTablespace()) {
        oprot.writeString(struct.tablespace);
      }
      if (struct.isSetVersion()) {
        oprot.writeI64(struct.version);
      }
      if (struct.isSetDataURI()) {
        oprot.writeString(struct.dataURI);
      }
      if (struct.isSetPartition()) {
        oprot.writeI32(struct.partition);
      }
      if (struct.isSetMetadata()) {
        struct.metadata.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DeployAction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.tablespace = iprot.readString();
        struct.setTablespaceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.version = iprot.readI64();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataURI = iprot.readString();
        struct.setDataURIIsSet(true);
      }
      if (incoming.get(3)) {
        struct.partition = iprot.readI32();
        struct.setPartitionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.metadata = new PartitionMetadata();
        struct.metadata.read(iprot);
        struct.setMetadataIsSet(true);
      }
    }
  }

}

